// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"verilog-oj/backend/internal/handlers"
	"verilog-oj/backend/internal/repository"
	"verilog-oj/backend/internal/services"

	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeApp 初始化整个应用
func InitializeApp(db *gorm.DB) (*App, error) {
	userRepository := repository.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	problemRepository := repository.NewProblemRepository(db)
	problemService := services.NewProblemService(problemRepository)
	submissionRepository := repository.NewSubmissionRepository(db)
	submissionService := services.NewSubmissionService(submissionRepository, problemRepository, userRepository)
	forumRepository := repository.NewForumRepository(db)
	forumService := services.NewForumService(forumRepository, userRepository)
	newsRepository := repository.NewNewsRepository(db)
	newsService := services.NewNewsService(newsRepository, userRepository)
	adminRepository := repository.NewAdminRepository(db)
	adminService := services.NewAdminService(adminRepository)
	handlersHandlers := handlers.NewHandlers(userService, problemService, submissionService, forumService, newsService, adminService)
	servicesServices := services.NewServices(userRepository, problemRepository, submissionRepository, forumRepository, newsRepository, adminRepository)
	repositories := repository.NewRepositories(db)
	app := NewApp(handlersHandlers, servicesServices, repositories)
	return app, nil
}

// wire.go:

// App 包含所有应用组件的结构体
type App struct {
	Handlers *handlers.Handlers
	Services *services.Services
	Repos    *repository.Repositories
}

// NewApp 创建App实例
func NewApp(handlers2 *handlers.Handlers, services2 *services.Services,
	repos *repository.Repositories,
) *App {
	return &App{
		Handlers: handlers2,
		Services: services2,
		Repos:    repos,
	}
}
