openapi: 3.0.3
info:
  title: Verilog OJ Problem Management API
  description: 题目管理相关API
  version: 1.0.0
  contact:
    name: API Support
    email: support@verilog-oj.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:8080/api/v1
    description: 开发环境
  - url: https://api.verilog-oj.com/api/v1
    description: 生产环境

paths:
  /problems:
    get:
      tags:
        - 题目管理
      summary: 获取题目列表
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: difficulty
          in: query
          schema:
            type: string
            enum: [Easy, Medium, Hard]
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemListResponse'

    post:
      tags:
        - 题目管理
      summary: 创建题目
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemCreateRequest'
      responses:
        '201':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemCreateResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /problems/{id}:
    get:
      tags:
        - 题目管理
      summary: 获取题目详情
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailsResponse'
        '404':
          description: 题目不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - 题目管理
      summary: 更新题目
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemUpdateRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemUpdateResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - 题目管理
      summary: 删除题目
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDeleteResponse'

  /problems/{id}/testcases:
    get:
      tags:
        - 题目管理
      summary: 获取题目测试用例
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCaseListResponse'

    post:
      tags:
        - 题目管理
      summary: 添加测试用例
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseRequest'
      responses:
        '201':
          description: 添加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCaseAddResponse'

  /problems/{id}/submissions:
    get:
      tags:
        - 题目管理
      summary: 获取题目提交记录
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionListResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

    Problem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        input_desc:
          type: string
        output_desc:
          type: string
        difficulty:
          type: string
          enum: [Easy, Medium, Hard]
        category:
          type: string
        tags:
          type: array
          items:
            type: string
        time_limit:
          type: integer
        memory_limit:
          type: integer
        is_public:
          type: boolean
        author_id:
          type: integer
        submit_count:
          type: integer
        accept_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProblemListResponse:
      type: object
      properties:
        problems:
          type: array
          items:
            $ref: '#/components/schemas/Problem'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer

    ProblemCreateRequest:
      type: object
      required:
        - title
        - description
        - difficulty
      properties:
        title:
          type: string
        description:
          type: string
        input_desc:
          type: string
        output_desc:
          type: string
        difficulty:
          type: string
          enum: [Easy, Medium, Hard]
        category:
          type: string
        tags:
          type: array
          items:
            type: string
        time_limit:
          type: integer
          default: 1000
        memory_limit:
          type: integer
          default: 128
        test_cases:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseRequest'

    ProblemCreateResponse:
      type: object
      properties:
        message:
          type: string
        problem:
          $ref: '#/components/schemas/Problem'

    ProblemUpdateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        input_desc:
          type: string
        output_desc:
          type: string
        difficulty:
          type: string
          enum: [Easy, Medium, Hard]
        category:
          type: string
        tags:
          type: array
          items:
            type: string
        time_limit:
          type: integer
        memory_limit:
          type: integer
        is_public:
          type: boolean

    ProblemUpdateResponse:
      type: object
      properties:
        message:
          type: string
        problem:
          $ref: '#/components/schemas/Problem'

    ProblemDeleteResponse:
      type: object
      properties:
        message:
          type: string

    ProblemDetailsResponse:
      type: object
      properties:
        problem:
          $ref: '#/components/schemas/Problem'

    TestCaseRequest:
      type: object
      required:
        - input
        - output
      properties:
        input:
          type: string
        output:
          type: string
        is_sample:
          type: boolean

    TestCaseResponse:
      type: object
      properties:
        id:
          type: integer
        problem_id:
          type: integer
        input:
          type: string
        output:
          type: string
        is_sample:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TestCaseListResponse:
      type: object
      properties:
        test_cases:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseResponse'

    TestCaseAddResponse:
      type: object
      properties:
        message:
          type: string
        test_case:
          $ref: '#/components/schemas/TestCaseResponse'

    Submission:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        problem_id:
          type: integer
        code:
          type: string
        language:
          type: string
        status:
          type: string
        score:
          type: integer
        error_message:
          type: string
        passed_tests:
          type: integer
        total_tests:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SubmissionListResponse:
      type: object
      properties:
        submissions:
          type: array
          items:
            $ref: '#/components/schemas/Submission'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
